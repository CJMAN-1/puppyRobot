
termproject_jinchang.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001159  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f9  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d8  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac2  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047b  00000000  00000000  000033fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003875  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	5d c0       	rjmp	.+186    	; 0xc4 <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c0       	rjmp	.+106    	; 0xe0 <__vector_29>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	64 d0       	rcall	.+200    	; 0x172 <main>
  aa:	12 c1       	rjmp	.+548    	; 0x2d0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:





ISR(INT0_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
	
	PORTA = 0x00;
  b8:	1b ba       	out	0x1b, r1	; 27
}
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_2>:


ISR(INT1_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24

	PORTA = 0xFF;	
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8b bb       	out	0x1b, r24	; 27
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_29>:

//제어주기 : 20ms
ISR(TIMER3_OVF_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	0b b6       	in	r0, 0x3b	; 59
  ec:	0f 92       	push	r0
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	
	TCNT3 = 64285; // Bottom 설정
 106:	8d e1       	ldi	r24, 0x1D	; 29
 108:	9b ef       	ldi	r25, 0xFB	; 251
 10a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	g_cnt++;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	//0.5초에 한번씩 실행
	if(g_cnt>25)
 124:	4a 97       	sbiw	r24, 0x1a	; 26
 126:	74 f0       	brlt	.+28     	; 0x144 <__vector_29+0x64>

		//TransNumUart1(GetResistor()); TransUart1(','); TransUart1(' ');		
		//TransNumUart1(GetCDS()); TransUart1(','); TransUart1(' ');
		//TransNumUart1(GetLM35()); TransUart1(','); TransUart1(' ');
		//TransNumUart1(GetTHEMISTER()); TransUart1(','); TransUart1(' ');
		TransNumUart1(GetGAS()); TransUart1(','); TransUart1(' ');
 128:	a9 d0       	rcall	.+338    	; 0x27c <GetGAS>
 12a:	84 d0       	rcall	.+264    	; 0x234 <TransNumUart1>
 12c:	8c e2       	ldi	r24, 0x2C	; 44
 12e:	7a d0       	rcall	.+244    	; 0x224 <TransUart1>
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	78 d0       	rcall	.+240    	; 0x224 <TransUart1>
		//TransNumUart1(GetPOWER()); TransUart1(','); TransUart1(' ');
		 
		TransUart1('\n');         
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	76 d0       	rcall	.+236    	; 0x224 <TransUart1>
 138:	8d e0       	ldi	r24, 0x0D	; 13
		TransUart1('\r');
 13a:	74 d0       	rcall	.+232    	; 0x224 <TransUart1>
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
		
		TransUart1('\n');
		TransUart1('\r');
		*/

		g_cnt = 0;
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 144:	1b bc       	out	0x2b, r1	; 43
 146:	1a bc       	out	0x2a, r1	; 42
	}


	//모터제어
	OCR1A = 0;
 148:	19 bc       	out	0x29, r1	; 41
 14a:	18 bc       	out	0x28, r1	; 40
	OCR1B = 0;
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
}
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0b be       	out	0x3b, r0	; 59
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <main>:
 172:	08 d0       	rcall	.+16     	; 0x184 <InitIO>
 174:	0d d0       	rcall	.+26     	; 0x190 <InitExtInt>
int main(void)
{
    /* Replace with your application code */
	InitIO();
	InitExtInt();
	InitTimer1(); // 모터제어
 176:	13 d0       	rcall	.+38     	; 0x19e <InitTimer1>
	InitTimer3(); // 제어주기
 178:	1f d0       	rcall	.+62     	; 0x1b8 <InitTimer3>
	InitADC();
 17a:	2c d0       	rcall	.+88     	; 0x1d4 <InitADC>
 17c:	38 d0       	rcall	.+112    	; 0x1ee <InitUart0>
	InitUart0();
 17e:	42 d0       	rcall	.+132    	; 0x204 <InitUart1>
 180:	78 94       	sei
	InitUart1();
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x10>

00000184 <InitIO>:
 184:	8f ef       	ldi	r24, 0xFF	; 255
	
	sei();
 186:	8a bb       	out	0x1a, r24	; 26
 188:	84 bb       	out	0x14, r24	; 20
	float vout = 5 * ((double)1/1023) * adc;
	float Rth = (5./vout)*4700 - 4700;
	float T = 1 / (1. / (273.15 + 25.) + 1./3650 * log(Rth/1000.) );
	float Tth = T - 273.5 ;   //+a
	return Tth;
}
 18a:	11 ba       	out	0x11, r1	; 17
 18c:	8b bb       	out	0x1b, r24	; 27
 18e:	08 95       	ret

00000190 <InitExtInt>:
 190:	11 ba       	out	0x11, r1	; 17
 192:	8a e0       	ldi	r24, 0x0A	; 10
 194:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	89 bf       	out	0x39, r24	; 57
 19c:	08 95       	ret

0000019e <InitTimer1>:
 19e:	82 ea       	ldi	r24, 0xA2	; 162
 1a0:	8f bd       	out	0x2f, r24	; 47
 1a2:	89 e1       	ldi	r24, 0x19	; 25
 1a4:	8e bd       	out	0x2e, r24	; 46
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	97 bd       	out	0x27, r25	; 39
 1ac:	86 bd       	out	0x26, r24	; 38
 1ae:	1b bc       	out	0x2b, r1	; 43
 1b0:	1a bc       	out	0x2a, r1	; 42
 1b2:	19 bc       	out	0x29, r1	; 41
 1b4:	18 bc       	out	0x28, r1	; 40
 1b6:	08 95       	ret

000001b8 <InitTimer3>:
 1b8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 1c2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 1c6:	8d e1       	ldi	r24, 0x1D	; 29
 1c8:	9b ef       	ldi	r25, 0xFB	; 251
 1ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d2:	08 95       	ret

000001d4 <InitADC>:
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	87 b9       	out	0x07, r24	; 7
 1d8:	87 e8       	ldi	r24, 0x87	; 135
 1da:	86 b9       	out	0x06, r24	; 6
 1dc:	08 95       	ret

000001de <GetADC>:
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	87 b9       	out	0x07, r24	; 7
 1e2:	36 9a       	sbi	0x06, 6	; 6
 1e4:	34 9b       	sbis	0x06, 4	; 6
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <GetADC+0x6>
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	95 b1       	in	r25, 0x05	; 5
 1ec:	08 95       	ret

000001ee <InitUart0>:
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	82 b9       	out	0x02, r24	; 2
 1f2:	1b b8       	out	0x0b, r1	; 11
 1f4:	88 e1       	ldi	r24, 0x18	; 24
 1f6:	8a b9       	out	0x0a, r24	; 10
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	89 b9       	out	0x09, r24	; 9
 202:	08 95       	ret

00000204 <InitUart1>:
 204:	81 b3       	in	r24, 0x11	; 17
 206:	83 7f       	andi	r24, 0xF3	; 243
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	81 bb       	out	0x11, r24	; 17
 20c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 222:	08 95       	ret

00000224 <TransUart1>:
 224:	eb e9       	ldi	r30, 0x9B	; 155
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	95 ff       	sbrs	r25, 5
 22c:	fd cf       	rjmp	.-6      	; 0x228 <TransUart1+0x4>
 22e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 232:	08 95       	ret

00000234 <TransNumUart1>:
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
 23a:	68 ee       	ldi	r22, 0xE8	; 232
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	21 d0       	rcall	.+66     	; 0x282 <__divmodhi4>
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	86 0f       	add	r24, r22
 244:	ef df       	rcall	.-34     	; 0x224 <TransUart1>
 246:	24 e6       	ldi	r18, 0x64	; 100
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	ce 01       	movw	r24, r28
 24c:	b9 01       	movw	r22, r18
 24e:	19 d0       	rcall	.+50     	; 0x282 <__divmodhi4>
 250:	cb 01       	movw	r24, r22
 252:	b9 01       	movw	r22, r18
 254:	16 d0       	rcall	.+44     	; 0x282 <__divmodhi4>
 256:	80 5d       	subi	r24, 0xD0	; 208
 258:	e5 df       	rcall	.-54     	; 0x224 <TransUart1>
 25a:	2a e0       	ldi	r18, 0x0A	; 10
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	ce 01       	movw	r24, r28
 260:	b9 01       	movw	r22, r18
 262:	0f d0       	rcall	.+30     	; 0x282 <__divmodhi4>
 264:	c8 2f       	mov	r28, r24
 266:	cb 01       	movw	r24, r22
 268:	b9 01       	movw	r22, r18
 26a:	0b d0       	rcall	.+22     	; 0x282 <__divmodhi4>
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	da df       	rcall	.-76     	; 0x224 <TransUart1>
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	8c 0f       	add	r24, r28
 274:	d7 df       	rcall	.-82     	; 0x224 <TransUart1>
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <GetGAS>:
//GetGAS
// Input :
// Output : GAS
//////////////////////////////////////////////////////////////////
int GetGAS(){
	int adc = GetADC(ADC_MUX_GAS);
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	af cf       	rjmp	.-162    	; 0x1de <GetADC>
	return adc;
}
 280:	08 95       	ret

00000282 <__divmodhi4>:
 282:	97 fb       	bst	r25, 7
 284:	07 2e       	mov	r0, r23
 286:	16 f4       	brtc	.+4      	; 0x28c <__divmodhi4+0xa>
 288:	00 94       	com	r0
 28a:	06 d0       	rcall	.+12     	; 0x298 <__divmodhi4_neg1>
 28c:	77 fd       	sbrc	r23, 7
 28e:	08 d0       	rcall	.+16     	; 0x2a0 <__divmodhi4_neg2>
 290:	0b d0       	rcall	.+22     	; 0x2a8 <__udivmodhi4>
 292:	07 fc       	sbrc	r0, 7
 294:	05 d0       	rcall	.+10     	; 0x2a0 <__divmodhi4_neg2>
 296:	3e f4       	brtc	.+14     	; 0x2a6 <__divmodhi4_exit>

00000298 <__divmodhi4_neg1>:
 298:	90 95       	com	r25
 29a:	81 95       	neg	r24
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	08 95       	ret

000002a0 <__divmodhi4_neg2>:
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255

000002a6 <__divmodhi4_exit>:
 2a6:	08 95       	ret

000002a8 <__udivmodhi4>:
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	51 e1       	ldi	r21, 0x11	; 17
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <__udivmodhi4_ep>

000002b0 <__udivmodhi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	a6 17       	cp	r26, r22
 2b6:	b7 07       	cpc	r27, r23
 2b8:	10 f0       	brcs	.+4      	; 0x2be <__udivmodhi4_ep>
 2ba:	a6 1b       	sub	r26, r22
 2bc:	b7 0b       	sbc	r27, r23

000002be <__udivmodhi4_ep>:
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	5a 95       	dec	r21
 2c4:	a9 f7       	brne	.-22     	; 0x2b0 <__udivmodhi4_loop>
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	bc 01       	movw	r22, r24
 2cc:	cd 01       	movw	r24, r26
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
